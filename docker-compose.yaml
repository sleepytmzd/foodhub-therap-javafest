version: '4'
services:
  mongodb1:
    image: mongo:7.0.5
    container_name: mongodb-food
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - ./data/mongodb1:/data/db
  mongodb2:
    image: mongo:7.0.5
    container_name: mongodb-visit
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: visit-service
    volumes:
      - ./data/mongodb2:/data/db
  mongodb3:
    image: mongo:7.0.5
    container_name: mongodb-review
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: review-service
    volumes:
      - ./data/mongodb3:/data/db
  mongodb4:
    image: mongo:7.0.5
    container_name: mongodb-restaurant
    ports:
      - "27020:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: rest-service
    volumes:
      - ./data/mongodb5:/data/db
  mongodb5:
    image: mongo:7.0.5
    container_name: mongodb-recommendations
    ports:
      - "27021:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: recommendation-service
    volumes:
      - ./data/mongodb6:/data/db
  mongodb6:
    image: mongo:7.0.5
    container_name: mongodb-hang
    ports:
      - "27022:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: hangout-service
    volumes:
      - ./data/mongodb7:/data/db
  postgres-kc:
    image: postgres:17.6
    container_name: postgres-kc 
    volumes:
      - ./data/postgres-kc:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak_db
      POSTGRES_USER: keycloak_db_user
      POSTGRES_PASSWORD: keycloak_db_user_password
    # networks:
    #   - keycloak_network
  postgres-user:
    image: postgres:17.6
    container_name: postgres-user 
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres-user:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_db"]
      interval: 5s
      retries: 10
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: start --import-realm
    environment:
      KC_HOSTNAME: http://keycloak:8080
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: password
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-kc/keycloak_db
      KC_DB_USERNAME: keycloak_db_user
      KC_DB_PASSWORD: keycloak_db_user_password
    ports:
      - 8090:8080
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    # restart: always
    depends_on:
      - postgres-kc
    # networks:
    #   - keycloak_network
  nginx-proxy:
    image: nginx:stable
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:8080"  # expose to browser as localhost:9000
    depends_on:
      - keycloak
  image-service-sb:
    image: sleepytmzd/image-service-sb:v3      
    container_name: image-service-sb 
    ports:
      - "8085:8080"
    environment:
      CLOUDINARY_URL: cloudinary://941186935662824:i5ioWntb-8NFNNUPvncgCijswFE@dihf0za5q
  # food-service:
  #   image: sleepytmzd/food-service:v3
  #   container_name: food-service
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     IMAGE_SERVICE_URL: http://image-service-sb:8080
  #     MONGODB1_URL: mongodb://root:password@mongodb1:27017/product-service?authSource=admin
  #     FRONTEND_URL: http://localhost:7000
  #     KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
  #   # extra_hosts:
  #   #   - "localhost:host-gateway"
  #   depends_on:
  #     - mongodb1
  #     - image-service-sb
  food-service:
    image: sleepytmzd/food-service:v4
    container_name: food-service
    ports:
      - "8081:8081"
    environment:
      RECOM_SERVICE_URL: http://recomm-agent-service:8020
      RESTAURANT_SERVICE_URL: http://restaurant-service:8089
      IMAGE_SERVICE_URL: http://image-service-sb:8080
      MONGODB1_URL: mongodb://root:password@mongodb1:27017/product-service?authSource=admin
      FRONTEND_URL: http://localhost:7000
      KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
    # extra_hosts:
    #   - "localhost:host-gateway"
    depends_on:
      - mongodb1
      - image-service-sb
      - recomm-agent-service
  
  visit-service:
    image: sleepytmzd/visit-service:v4       # Replace with your dockerhub username
    container_name: visit-service
    ports:
      - "8082:8082"
    environment:
      MONGODB2_URL: mongodb://root:password@mongodb2:27017/visit-service?authSource=admin
      FRONTEND_URL: http://localhost:7000
      KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
    extra_hosts:
      - "localhost:host-gateway"
    depends_on:
      - mongodb2
  # review-service:
  #   image: sleepytmzd/review-service:v4       # Replace with your dockerhub username
  #   container_name: review-service
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     MONGODB3_URL: mongodb://root:password@mongodb3:27017/review-service?authSource=admin
  #     FRONTEND_URL: http://localhost:7000
  #     KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
  #   extra_hosts:
  #     - "localhost:host-gateway"
  #   depends_on:
  #     - mongodb3
  review-service:
    image: review-service:tamim       # Replace with your dockerhub username
    container_name: review-service
    ports:
      - "8083:8083"
    environment:
      NEGPOS_URL: http://negative-positive-agent-service:8021
      MONGODB3_URL: mongodb://root:password@mongodb3:27017/review-service?authSource=admin
      FRONTEND_URL: http://localhost:7000
      KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
    extra_hosts:
      - "localhost:host-gateway"
    depends_on:
      - mongodb3
  user-service:
    image: sleepytmzd/user-service:v4
    container_name: user-service 
    ports:
      - "8084:8084"
    environment:
      POSTGRES_URL: jdbc:postgresql://postgres-user:5432/user_db
      POSTGRES_USER: user 
      POSTGRES_PASSWORD: password
      IMAGE_SERVICE_URL: http://image-service-sb:8080
      FRONTEND_URL: http://localhost:7000
      KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
    # extra_hosts:
    #   - "localhost:host-gateway"
    depends_on:
      postgres-user:
        condition: service_healthy
  restaurant-service:
    image: restaurant-service:tamim       # Replace with your dockerhub username
    container_name: restaurant-service
    ports:
      - "8089:8089"
    environment:
      RECOM_SERVICE_URL: http://recomm-agent-service:8020
      MONGODB4_URL: mongodb://root:password@mongodb4:27017/rest-service?authSource=admin
      FRONTEND_URL: http://localhost:7000
      KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
    extra_hosts:
      - "localhost:host-gateway"
    depends_on:
      - mongodb4
      - recomm-agent-service
  frontend:
    image: sleepytmzd/frontend:v3
    container_name: frontend
    ports:
      - "7000:7000"
    environment:
      NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: foodhub
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: foodhub-kc
      NEXT_PUBLIC_VISIT_SERVICE_URL: http://localhost:8082
      NEXT_PUBLIC_USER_SERVICE_URL: http://localhost:8084
      NEXT_PUBLIC_REVIEW_SERVICE_URL: http://localhost:8083
      NEXT_PUBLIC_FOOD_SERVICE_URL: http://localhost:8081

    depends_on:
      - keycloak
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"   # REST API
      - "6334:6334"   # gRPC API
    volumes:
      - ./qdrant_storage:/qdrant/storage

  recomm-agent-service:
    image: recom-agent:tamim # Replace with actual image for your OpenAI service
    container_name: recomm-agent-service
    ports:
      - "8020:8020"
    environment:
      MONGODB5_URL: mongodb://root:password@mongodb-recommendations:27017/recommendation-service?authSource=admin
      GOOGLE_PLACES_API_KEY: AIzaSyA5_RYijTsFz7b0x3XQP3MUo03xpM0V7gE
      OPENAI_API_KEY: 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
    depends_on:
      - qdrant

  negative-positive-agent-service:
    image: negative-positive-agent:tamim # Replace with actual image for your OpenAI service
    container_name: negative-positive-agent-service
    ports:
      - "8021:8021"
    environment:
      GEMINI_API_KEY: AIzaSyBjt0UbNnk-OVkJuxp0zXY2826UhPAbDQc

  hangout-service:
    image: hangout-service:tamim       # Replace with your dockerhub username
    container_name: hangout-service
    ports:
      - "8091:8091"
    environment:
      MONGODB6_URL: mongodb://root:password@mongodb6:27017/hangout-service?authSource=admin
      FRONTEND_URL: http://localhost:7000
      KC_ISSUER_URL: http://keycloak:8080/realms/foodhub
    extra_hosts:
      - "localhost:host-gateway"
    depends_on:
      - mongodb6



  # nutrition-predict-agent:
  #   image: sleepytmzd/nutrition-predict-agent:v1
  #   container_name: nutrition-predict-agent
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     OPENAI_API_KEY: your_openai_api_key_here

  # recipe-agent:
  #   image: sleepytmzd/recipe-agent:v1
  #   container_name: recipe-agent
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     OPENAI_API_KEY: your_openai_api_key_here

  # frontend:
  #   build:
  #     context: ./frontend
  #     args:
  #       NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8080
  #       NEXT_PUBLIC_KEYCLOAK_REALM: foodhub
  #       NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: foodhub-kc
  #       NEXT_PUBLIC_VISIT_SERVICE_URL: http://localhost:8082
  #       NEXT_PUBLIC_USER_SERVICE_URL: http://localhost:8084
  #     network: host
  #   dns:
  #     - 8.8.8.8
  #     - 8.8.4.4
  #     - 1.1.1.1
  #   image: sleepytmzd/frontend:v4
  #   container_name: frontend
  #   ports:
  #     - "7000:7000"
  #   depends_on:
  #     - keycloak


# networks:
#   keycloak_network:
#     driver: bridge
  # mysql1:
  #   image: mysql:8.3.0
  #   container_name: mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: mysql
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - ./data/mysql:/var/lib/mysql
  #     - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.5.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # broker:
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: broker
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #   depends_on:
  #     - zookeeper
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.5.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8085:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
  #     SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - "8086:8080"
  #   depends_on:
  #     - broker
  #   environment:
  #     KAFKA_CLUSTERS_NAME: local
  #     KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
  #     #      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
  #     DYNAMIC_CONFIG_ENABLED: 'true'
  # keycloak-mysql:
  #   container_name: keycloak-mysql
  #   image: mysql:8
  #   volumes:
  #     - ./volume-data/mysql_keycloak_data:/var/lib/mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_DATABASE: keycloak
  #     MYSQL_USER: keycloak
  #     MYSQL_PASSWORD: password
  # keycloak:
  #   container_name: keycloak
  #   image: quay.io/keycloak/keycloak:24.0.1
  #   command: [ "start-dev", "--import-realm" ]
  #   environment:
  #     DB_VENDOR: MYSQL
  #     DB_ADDR: mysql
  #     DB_DATABASE: keycloak
  #     DB_USER: keycloak
  #     DB_PASSWORD: password
  #     KEYCLOAK_ADMIN: admin
  #     KEYCLOAK_ADMIN_PASSWORD: admin
  #   ports:
  #     - "8181:8080"
  #   volumes:
  #     - ./docker/keycloak/realms/:/opt/keycloak/data/import/
  #   depends_on:
  #     - keycloak-mysql
  # loki:
  #   image: grafana/loki:main
  #   container_name: loki
  #   command: [ "-config.file=/etc/loki/local-config.yaml" ]
  #   ports:
  #     - "3100:3100"
  # prometheus:
  #   image: prom/prometheus:v2.46.0
  #   container_name: prometheus
  #   command:
  #     - --enable-feature=exemplar-storage
  #     - --config.file=/etc/prometheus/prometheus.yml
  #   volumes:
  #     - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   ports:
  #     - "9090:9090"
  # tempo:
  #   image: grafana/tempo:2.2.2
  #   container_name: tempo
  #   command: [ "-config.file=/etc/tempo.yaml" ]
  #   volumes:
  #     - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
  #     - ./data/tempo:/tmp/tempo
  #   ports:
  #     - "3110:3100"  # Tempo
  #     - "9411:9411" # zipkin
  # grafana:
  #   image: grafana/grafana:10.1.0
  #   container_name: grafana
  #   volumes:
  #     - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
  #   environment:
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_AUTH_DISABLE_LOGIN_FORM=true
  #   ports:
  #     - "3000:3000"